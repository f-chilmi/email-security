openapi: 3.0.0
info:
  title: Email Security Dashboard API
  version: 1.0.0
  description: API for testing domain email security (DMARC, SPF, DKIM, Mail Server)

servers:
  - url: http://localhost:8000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        organization: { type: string }

    Domain:
      type: object
      properties:
        id: { type: string }
        userId: { type: string }
        domainName: { type: string }
        isActive: { type: boolean }

    TestSession:
      type: object
      properties:
        id: { type: string }
        domainId: { type: string }
        sessionName: { type: string }
        status: { type: string, enum: [PENDING, RUNNING, COMPLETED, FAILED] }
        totalTests: { type: integer }
        completedTests: { type: integer }
        overallScore: { type: integer }

    TestResult:
      type: object
      properties:
        id: { type: string }
        testType: { type: string, enum: [DMARC, SPF, DKIM, MAIL_SERVER] }
        status: { type: string, enum: [PENDING, RUNNING, COMPLETED, FAILED] }
        score: { type: integer }
        recommendations: { type: array, items: { type: string } }
        resultData: { type: object }

    ApiResponse:
      type: object
      properties:
        success: { type: boolean }
        data: { type: object }
        message: { type: string }
        error: { type: string }

paths:
  # AUTH ENDPOINTS
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                firstName: { type: string }
                lastName: { type: string }
                organization: { type: string }
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      token: { type: string }
                      user: { $ref: "#/components/schemas/User" }

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      token: { type: string }
                      user: { $ref: "#/components/schemas/User" }

  /auth/profile:
    get:
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data: { $ref: "#/components/schemas/User" }

  # DOMAIN ENDPOINTS
  /domains:
    get:
      summary: Get user domains
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of domains
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: "#/components/schemas/Domain" }

    post:
      summary: Add new domain
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [domainName]
              properties:
                domainName: { type: string, example: "example.com" }
      responses:
        "201":
          description: Domain added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data: { $ref: "#/components/schemas/Domain" }

  /domains/{id}:
    get:
      summary: Get domain by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Domain details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data: { $ref: "#/components/schemas/Domain" }

    delete:
      summary: Delete domain
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Domain deleted

  # TEST ENDPOINTS
  /tests/run:
    post:
      summary: Run email security tests
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [domainName]
              properties:
                domainName: { type: string, example: "example.com" }
                testTypes:
                  type: array
                  items: { type: string, enum: [DMARC, SPF, DKIM, MAIL_SERVER] }
                  default: [DMARC, SPF, DKIM, MAIL_SERVER]
                sessionName: { type: string }
      responses:
        "202":
          description: Tests started
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          sessionId: { type: string }
                          domainId: { type: string }
                          status: { type: string }

  /tests/sessions:
    get:
      summary: Get user test sessions
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema: { type: integer, default: 50 }
      responses:
        "200":
          description: List of test sessions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: "#/components/schemas/TestSession" }

  /tests/sessions/{sessionId}:
    get:
      summary: Get session by ID
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Session details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data: { $ref: "#/components/schemas/TestSession" }

  /tests/sessions/{sessionId}/results:
    get:
      summary: Get session results
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Session with test results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          session: { $ref: "#/components/schemas/TestSession" }
                          results:
                            type: array
                            items: { $ref: "#/components/schemas/TestResult" }

  /tests/sessions/{sessionId}/retry:
    post:
      summary: Retry failed tests
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Retrying failed tests
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          retriedTests: { type: integer }
